Linux でよく使うコマンド集
============================

コマンド正引き
----------------------------

* `tcpdump`: 自PCに送られてくるパケットを解析する
  * `-i`: 待ち受けるインターフェイスカードを指定
  * `-f`: アドレス解決しない
  * `port port_name`: 解析するパケットのポート番号を指定
  * `-v, -vv`: より詳細な情報を表示させる

* `gpasswd` : グループパスワードを管理する
  * -a ユーザー名: グループにユーザーを追加
  * -d ユーザー名: グループからユーザーを削除
  * -A ユーザー名: グループの管理者を定義


* `useradd`: ユーザーを追加する
  * `-M`: ディレクトリを作らない
  * `-d`: ホームディレクトリを指定する
  * `-s`: デフォルトシェルを指定する(/bin/bash, /bin/false, /bin/nologin)
    ⇒ どのシェルが使えるかどうかは`/etc/shells`に書いてある
    

* `userdel`: ユーザーを削除する
  * -r: ホームディレクトリごと削除する


* `mkpasswd`: ランダムな文字列を生成する
  コマンドが見つからない場合はパッケージ管理ソフトで`expect`をインストールする
  ちなみに、macの場合はpwgenで代用できる。
      * `-l 長さ`: パスワードの長さを指定する
      * `-s 長さ`: 特殊文字の長さを指定する


* `sort`:
    レコードをソートする。
    * レコードが何種類か見たい場合: `sort -u`
    * 逆順にソートする: `sort -r`
    * レコード別の分布が見たい場合: `sort | uniq -c`


* `tee`:
    標準入力から読み込んだ内容を標準出力とファイルの両方に出力する
    例）
    
         $ ls -al | tee file.txt
         drwxr-xr-x  18 user staff  612  4 10 05:51 ./
         drwxr-xr-x 162 user staff 5.4K  4 10 06:02 ../
         
         $ cat file.txt
         drwxr-xr-x  18 user staff  612  4 10 05:51 ./
         drwxr-xr-x 162 user staff 5.4K  4 10 06:02 ../


* `nkf`:
    文字コードの変換を行える
        * `-g`: ファイルの文字コードを予測する
        * `-e`: EUCコードを出力する
        * `-E`: 入力がEUCを仮定する
        * `-w`: Unicode, UTF-8を出力する
        * `-W`: 入力がUTF-8を仮定する
        * `-s`: Shift JIS 形式に変換する
        * `-S`: 入力がShift JIS を仮定する
        * `--overwrite`: ファイルを上書きする
        * `-Z`: X0208中の英数字と若干の記号をASCIIに変換する。（？）
        * `-j`: JISコードを出力する（文章をメール文形式に変換する時使う）
        * `-J`: 入力がISO-2022-JPを仮定する
        * `-m`: MIMEを解読する（メール文を読む時に使う）
        * `-L[u | w | m]`: 改行モード
            * -Lu: unix(LF)
            * -Lw: windows(CRLF)
            * -Lm: mac(CR)


* `nastat`:
    * `-a, --all`: 全ての接続を表示
    * `-r, --route`: ルーティングテーブルを表示
    * `-n, --numeric`: 名前解決しないで表示
    * `-l, --listen`:有効な接続を除いて、LISTEN状態になっているもの表示


* `dig`:
    DNSの問い合わせを行う。@を付けることで問い合わせ先サーバーを指定できる。
    `dig [@DNSサーバー] ドメイン名 タイプ オプション`
    例）dig @localhost co.jp ns : ローカルホストのネームサーバーに、co.jpのIPアドレスを問い合わせる


* `nmap`:
    ポートスキャンツール。
    サーバーがどのポートを使用しているか調べてくれる。
    * `-p number`: port range, 0-65535までのポートを指定できる
    * `-s[T | U | S | P]`: 
        * T: TCPスキャン tcpコネクションが張れるかどうかを調べる
        * U: UDPスキャン 0バイトのパケットをUDPで送る。ICMP返却された場合閉じてると判断
        * S: TCP SYNスキャン SYNパケットを送って SYN/ACK が送られて来るかどうかを調べる
        * P: Ping スキャン echoリクエストを送る
    * `-v`: verboseモード
    * `-P0`: スキャン時にpingを送らない
    * `-O`: 対象ホストを調べる
    * `-o filename`: 結果をファイルに出力する
    * `-i filename`: スキャン対象をファイルから読み込む
   
   
* `tcpdump`:
    CLIベースのパケットフィルタリングツール
    * `-i`: ネットワークインターフェイスを指定できる
    * `-n`: IPアドレスやポート番号を名前に変換しない
    * `host ポート番号`: フィルタリング対象のポート番号を指定
    * `host IPアドレス | ホスト名`: フィルタリング対象のIPアドレス・ホスト名を指定
    * `ip proto プロトコル名`: プロトコル名を指定 - icmp, tcp, udp


* `arp`:
    アープテーブルに関する操作を行う。
    arpプロトコル: IPアドレスに対応するMACアドレスを探すプロトコル。
    * `-a`: アープテーブルを表示させる（-n を同時に指定しないと恐ろしく時間がかかる）
    * `-n`: IPアドレスを名前に変換しない
    * `-i`: インターフェイスを指定
    * `-d ホスト名 | IPアドレス`: IPアドレスに関するMACアドレスを削除
    * `-d -a`: 全てのarpテーブルを削除


* `mail`:
    メールを送信するコマンド。
    例）echo "本文" | mail -s "タイトル" 宛先 -- -f 送信主


* `jot`:
    連番・ランダムなデータを生成する。    
    例）
      *0 ~ 100 までの数値を 20 ずつ出力*
      `jot 5 20 100`    
      
      *0 ~ 100までの数値をランダムに5つ出力する*
      `jot -r 5 0 100`
    
    
* `ffmpeg`:
    万能な動画エンコーダー。
    * `-formats`: 利用できるフォーマット一覧を出力する
    * `-i 動画・音声ファイル名`: 動画・音声ファイルの情報を習得する
    * 0 〜 300秒までを抜き出す: `ffmpeg -i input.mp3 -ss 0 -t 300 output.mp3`


* `paste ファイル1 ファイル2 ...`:
    同じ行を結合して表示する。
    区切り文字を指定する場合は`-d 文字`オプションを使う


* `pwgen パスワードの長さ パスワードの数`:
    MAC固有のパスワード生成コマンド
    * `-n`: 数値を最低一つは入れる
    * `-c`: 大文字を最低一つは入れる

* `curl url`:
    urlをダウンロードする。
    httpsでファイルをダウンロードする時に使う。
    基本的にダウンロード系はwgetで対応できるが、
    SSL通信の場合ば証明書エラーでダウンロードできないのでcurlを使う。
    * `-O url`: URL上のファイル名で保存する
    * `-L`: リダイレクト先に接続する
    * `-k`: SSL証明書の警告を無視する
    * `-I`: ヘッダーのみ表示させる

* `wget url`:
    `--no-check-certificate`: SSL 証明書の警告を無視する

* `date`:
    日付を表示させる

* `convert`: 
    画像に関する様々な処理を行う
    * 画像の変換: 
      * `convert -resize 960x640 元画像 変換先画像`: jpg画像を960px x 640px に変換する
      * `convert -resize 200% 元画像 変換元画像`: 画面サイズを倍にする
    * `convert -transparent white 元画像 変換先画像`: 白背景を透過に変換する

* `gunzip, gzip`:
    .gz 形式のフィアルの圧縮・解凍
    * `gunzip filename`: ファルの解凍
    * `gzip file`: ファイルの圧縮

* `stress`:
    * `-c cpu`: cpu分プロセスをフォークする
    * `-d 1 --hdd-bytes bytes`: bytes分ディスクに書き込む
        1) 3G 割り当てる `-d --hdd-bytes 3G`  
        2) 10G 割り当ててファイルを消去しない `-d --hdd-noclean --hdd-bytes 10G`
    * `-m memory`: メモリを割り当てる
        3G メモリを割り当てる: `--vm 4 --vm-bytes 3G --vm-keep`
        `--vm`: malloc を行うプロセス数
        `--vm-bytes`: mallocの最大値
        `--vm-keep`: メモリ数をキープする
        `--timeout`: タイムアウトまでの秒数

* `rsync コピー元 コピー先`: 
    データを差分同期するためのコマンド
    * `-a`: 元のパーミッションやグループなどを保持したまま同期できる
    * `-v`: 処理中の経過ファイルを表示する
    * `-z`: データ転送の圧縮を行う

* `nm [option(s)] [file(s)]`:
    ライブラリファイルなどのシンボルを表示する.
    nmで表示される記号の各意味:
    * `T`: テキスト領域（プログラム領域）
    * `U`: 未解決シンボル
    * `B`: 初期化されていないデータ領域
    * `D`: データ領域
    * `A`: 絶対値
    * `R`: read only 領域

* `rpm`:
    RPMパッケージマネージャー
    * パッケージがインストールされているか調べる: `rpm -qs package`

* `diff -u 元ファイル 修正ファイル > パッチファイル`: パッチファイルを作成
    * `-u`: unified 形式でパッチファイルを生成
    * `-c`: context diff 形式でパッチファイルを生成
* `patch -u 元ファイル < パッチファイル`: パッチの適用
* `patch -R -u 元ファイル < パッチファイル`: 適用したパッチを元に戻す


コマンド逆引きリスト
----------------------------

* OSの情報を調べる:

    // OS のバージョン
    $ cat /proc/version
    
    // 搭載されているCPU の情報
    cat /proc/cpuinfo
    
    // メモリの情報
    cat /proc/meminfo

* 画像の情報を調べる:
    `identify -verbose 画像名`

* ハードディスクの情報を調べる:
    `hdparm -I /dev/sda`

* 音を鳴らす:(MACのみ）
    `afplay 音声ファイル`

* 音声・動画の変換
    * MP3 -> WAV `ffmpeg -i input.mp3 output.wav`

* 拡張子を変換する:
    mv $file ${file%.ext1}.ext2

* MACアドレス変更:
    * MACの場合: `ifconfig en0 ether 00:00:00:00:00:00`
    * Linuxの場合: `ifconfig eth0 hwaddr ether 00:00:00:00:00:00`

* ある文字を含む行を削除する
    `sed '/abc/d' input.file`

* 空白から改行へ変換
    `sed -e "s/\ /\n/g file"`

* ログイン中のユーザーを全て表示: `who -u`

* initramfs を展開: `pax -rzf initramfs.img`

* カレントディレクトリを initramfs として圧縮: `find ./ | cpio -o -H newc | gzip -c > /boot/initramfs-linux.img`

* fstab の内容を反映させる: `sudo mount -a`

Mac OS X のみ
----------------------------

* /etc/hosts の編集を即座に反映させる: `sudo dscacheutil -flushcache`

