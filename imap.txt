imap 入門
============================

imap プロトコルとは
----------------------------
メールサーバーに到着したメールをPCに取り込むためのプロトコル。
メール転送プロトコルという点ではPOP3ぷとコルと同じだが、
IMAPの方がより高機能である。

IMAP の特徴
----------------------------
+ 非同期・タグ付け必要
IMAP4では非同期にコマンドを発行する事ができる。
そのために、サーバーから返ってきたレスポンスがどのコマンドに対応するか
判別する必要がある。
そのためにコマンドの一番最初に**ユニークなタグ**を付ける。
そうすることによって、どのコマンドがどのレスポンスに対応するかが分かる。

+ テキストベース・行指向
IMAP4のコマンドは**改行を終端としたテキストベース**のプロトコル。
そのため、telnetなどによって簡単に動作を確認することが出来る。

+ 集合表現・2種類の文字表現
IMAP4の文法は厳格。
スペースの数で意味が異なることもある。
可変個の字句の集合を表す場合は"("と")"で字句を囲み、ネストして表現することも出来る。
また文字の表現形式としては以下の2種類の表現がる。
  * クオートで文字列を囲む普通の表現: 
    "文字列"
    例) "String"
    
  * リテラル表現: 
    {文字数} CRLF 実際の文字列
    例){5}CRLF STRING

+ 3つの状態を持つ:
IMAP4では以下の**3つの状態を持ち、それぞれの状態で使えるコマンドが異なる。**
1. 非認証状態（ユーザー認証がされていない状態）
2. 認証済状態（メールボックスを操作する状態）
3. 選択済み状態（メールボックスを選択し、中のメールにアクセスできる状態）

IMAPのコマンド一覧
----------------------------

* **常時**行える操作:
  これらのコマンドだけは例外的に常時行える。
    
  * `CAPABILITY`:
      サーバーがサポートする機能範囲を表示する

  * `LOGOUT`:
      ログアウトする
    
  * `NOOP`:
      サーバーを状態を返す（基本的にOKが返る）


* **非認証状態**で行える操作:
  この状態ではほとんどの操作は行えない、認証前の状態。

  * `LOGIN ユーザー名 パスワード`:
      ユーザー名・パスワードを指定して認証を行う

* **非選択・認証状態**で行える操作:
  この状態では主にメールボックスに対する操作を行う。
  デフォルトで存在するメールボックスはinbox。
  
  * `CREATE メールボックス`: 
      メールボックスを作る
        
  * `DELETE メールボックス`: 
      メールボックスを削除
 
  * `SELECT メールボックス名`:
      メールボックスを選択する。
      SELECTコマンドを使うことで、
      メールボックス内のメッセージにアクセス出来るようになる。
      このSELECT後**選択済み状態に移行**する

  * `EXAMINE メールボックス`:
      メールボックスが存在するかどうかを確認する
    
  * `EXAMINE メールボックス 新しいメールボックスの名前`: 
      メールボックスの名前を変更する

  * `LIST 参照名 メールボックス（ワイルドカード可）`:
      参照名: ディレクトリのようなもの？
      参照名が空（""）の場合、かつメールボックスがワイルドカードのみ("*")
      の場合は利用可能なメールボックス一覧を返す。

* **選択・認証状態**で行える操作:
  メッセージナンバーはメールのIDのこと。
  またこれからはコロン":"区切(,)を用いて複数指定することもできる。
  *区切を入れる場合は次の数値にスペースを入れてはならない。*
  
  例1）3 を指定したい時
  FETCH 3 (RFC822)
  
  例2）1 ~ 100 を指定したい時
  FETCH 1:100 (RFC822)
  
  例3）2, 10 ~ 50 を指定したい時
  FETCH 2,10:50 (RFC822)
  
  例4）10 ~ 20, 50 ~ 100 を指定したい時
  FETCH 10:20,50:100 (RFC822)

  * `CHECK`:
      サーバー実装依存のリフレッシュなどを行う
  
  * `CLOSE`:
      **非選択・認証状態**に移行する
      
  * `FETCH メッセージナンバー 項目名`:
      メッセージナンバーに対応するメールを取得する。
      項目名を指定することでどいうデータを取得したのかを指定できる。
      FETCHの項目名で指定出来る値一覧：
      
      * `RFC822`: RFC822形式のメッセージ
      * `RFC822.SIZE`: RFC822形式で表現されたメッセージのオクテット
      * `RFC822.TEXT`: ヘッダーを除いた本文のテキスト
      * `RFC822.HEADER`:RFC822形式のメッセージヘッダ 
      * `UID`: ユニークメッセージ
      * `INTERNALDATE`: メッセージの最終
      * `ENVELOPE`: メッセージのエンベロープ構造体
          （メールヘッダーのデータ構造をlispのS式で表したようなもの）
      
      これらの項目は配列として複数指定することができる。
      例）
      FETCH 1 (RFC822.SIZE RFC822.TEXT UID INTERNALDATE)
  
  * `UID {COPY|FETCH|STORE|SEARCH} 項目`:
        
  
  * `SEARCH 検索基準`:
      検索基準を設定することで様々な条件で検索が行える。
      返却値はメッセージ連番として返される。
      
      * `TEXT 文字列`: *メール本文*に文字列を含むメール
      * `TO 文字列`: *TOフィールド*に文字列を含むメール
      * `SUBJECT 文字列`: *SUBJECTフィールド*（つまりメールタイトル）に文字列を含むメール
      * `SINCE 日付`: 内部日付が指定日以降のメール
      * `FROM 文字列`: *FROMフィールド*に文字列を含むメール

IMAP の例
----------------------------
gmailのimapサーバーに接続してメッセージのやり取りを行う。
（CApath に許可するCAの証明書を入れたディレクトリを設定しなければならない。詳しい方法はopenssl.txtにて）

    1$ openssl s_client -crlf -CApath ./.certs/ -connect imap.gmail.com:993
    // 証明書が表示される
    * OK Gimap ready for requests from 180.144.212.1 ww20if2383477pbb.103

    // ユーザー名とパスワードを入力してログインを行う
    $ LOGIN ユーザー名 パスワード
    * CAPABILITY IMAP4rev1 UNSELECT IDLE NAMESPACE QUOTA ID XLIST CHILDREN X-GM-EXT-1 UIDPLUS COMPRESS=DEFLATE
    ? OK ユーザー名 authenticated (Success)

    // どのメールボックスが利用できるか確認
    ? LIST "" "*"
    * LIST (\HasNoChildren) "/" "INBOX"
    * LIST (\HasNoChildren) "/" "Sent"
    * LIST (\HasNoChildren) "/" "WORKS"
    * LIST (\Noselect \HasChildren) "/" "[Gmail]"
    ... // その他にもいろいろ出てくる

    // デフォルトで用意されいている
    // inboxというメールボックスを利用することにする
    ? SELECT "inbox"
    * FLAGS (\Answered \Flagged \Draft \Deleted \Seen Junk NonJunk)
    * OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen Junk NonJunk \*)] Flags permitted.
    * OK [UIDVALIDITY 623056015] UIDs valid.
    * 8090 EXISTS // どのくらいメールがあるのか分かる
    * 0 RECENT
    * OK [UIDNEXT 8918] Predicted next UID.
    ? OK [READ-WRITE] inbox selected. (Success)

    // 1番のメールを読むことにする
    ? FETCH 1 (RFC822)
    * 1 FETCH (UID 1 RFC822 {4764}
    ... 
    // 1番目のメールに関する情報が出て来る
    // ちなみに日本語の場合はISO-2022-JPでエンコードされているので、
    // 訳の分からない文字化けした文字列が羅列される

    // contact という文字列が本文にあるメールを探す
    ? SEARCH TEXT "contact"
    * SEARCH 1259 1260 1261 2330 2331 4233 4234 4280 4281 4282 4289 4293 4294 4295 4299 4300 4305 4341 4342 4345 4346 4348 4349 4362 4363 4366 4372 4395 4396 4416 4420 4422 4423 4424 4530 4662 4683 4699 4932 5196 5200 5201 5202 5204 5207 5255 5425 5602 6040 7100 7264 7341 7649 7658
    ? OK SEARCH completed (Success)

    // TOフィールドに info という文字列を含むメールを探すa
    ? SEARCH to "info"
    * SEARCH 58 67 68 70 71 72 75 77 80 86 89 174 245 355 466 515 658 983 1114 1115 1117 1127 1128 1129 1137 1138 1139 1592 1614 1615 1616 1699 1700 1702 1741 1742 1746 1750 1753 1759 1802 1823 1830 1834 1836 1843 1844 1854 1871 1890 1899
    ? OK SEARCH completed (Success)

    // ENVELOPE フィールドのみ表示させる
    ? FETCH 1 (ENVELOPE)
    ... // S式みたいな形式でデータ構造が返る
    ? OK Success

    // そろそろ選択モードを辞める
    ? CLOSE
    ? OK Returned to authenticated state. (Success)

    // ログアウトする
    ? LOGOUT
    * BYE LOGOUT Requested
    ? OK 73 good day (Success)


参考サイト
----------------------------

* [RFC1730(IMAP4に関するRFC日本語訳）](http://srgia.com/docs/rfc1730j.html)
* [GmailにIMAPでMacのターミナルからアクセスする](http://nozawashinichi.sakura.ne.jp/usingmt/2010/12/gmailimapmac.html)
* [モバイル環境に優しいメールプロトコルIMAP（2）](http://www.atmarkit.co.jp/fmobile/rensai/imap02/imap02.html)
* [メールプロトコル一覧](http://www.sk-jp.com/book/javamail/contents/javamail_appendix.html)
