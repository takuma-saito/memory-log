mbr について
============================

mbr のバックアップ方法
----------------------------

パーティションテーブルが壊れた時のために MBR のバックアップは必ず取っておく.
ハードディスクの一番最後のセクタにバックアップ用に MBR を移しておく.

もし破損した場合は最後のセクタをそのまま一番最初のセクタにコピーすればよい.

まずセクタの最後の番号を調べる.

    $ fdisk -l /dev/sda
    Disk /dev/sda: 750.2 GB, 750156374016 bytes, 1465149168 sectors
    Units = sectors of 1 * 512 = 512 bytes
    Sector size (logical/physical): 512 bytes / 512 bytes
    I/O size (minimum/optimal): 512 bytes / 512 bytes
    Disk identifier: 0x0f837cfa
    
    Device Boot      Start         End      Blocks   Id  System
    /dev/sda1   *        2048     1026047      512000   83  Linux
    /dev/sda2         1026048  1465147391   732060672   8e  Linux LVM

この場合 1465149168 個のセクタ数存在することが分かる.
hdparam でも調べることができる.

    $ hdparm -g /dev/sda
    
    /dev/sda:
     geometry      = 91201/255/63, sectors = 1465149168, start = 0

セクタのバイト数: 512 Byte
（シリンダ中の）セクタの数: 64
（ディスク上）のシリンダーの数: 91202
ヘッドの数: 256

ちなみに fdisk で作成した場合 /dev/sda1 のスタートセクタは 63 になる.
parted などで作成すると 2048 になる.

一番最初のシリンダはブート用に使われるためにわざと開始セクタをずらしている.
parted の結果が 2048 になるのはおそらくアラインメントを合わせるためだと思われる.
（詳しくは 4KB のアライメント問題で検索してみよう）

今回注目したいのは /dev/sda2 の終了セクタ番号で 1465147391 となっている部分である.

セクタ数とパーティション最後のセクタ番号を引くと
1777 = 1465149168 - 1465147391

この結果より最後のセクタが終了セクタに設定されておらず 1777 セクタ分余りがあることが分かる.
MBR をハードディスクの最後に保存することは問題なさそうだ.

ちなみに上記の例は CHS (Cylinder, Head, Sector） で計算した論理的な数であって実際の仕組みは少し異なる.
ハードウェアの進化に伴い CHS 形式のみで指定することが難しくなったので
現在ほとんどのハードウェアが LBA という新しい方式でハードウェアにアクセスしている.

LBA は Logical Block Addressing の略で 512B を 1 Block とし, 先頭からセクタ数で読み込むブロックを指定している.

さて, 実際に最後のセクタへ MBR のバックアップを取ってみる.

まず念のためにデータがないことを確認する

    $ dd if=/dev/sda bs=512 skip=1465149167 | hexdump -C  

データがないことが分かれば, 実際に MBR の書込を行う.

    $ dd if=/dev/sda bs=512 count=1 of=/dev/sda seek=1465149167
    
実際に書き込まれているか確認する

    $ dd if=/dev/sda bs=512 skip=16777215 | hexdump -C

MBR が壊れてバックアップを適用する際は下記のように行えばよい.

    $ dd if=/dev/sda bs=512 count=1 of=/dev/sda skip=1465149167

mbr の構造
----------------------------

MBR の最初の 446 バイトはブートロード用のプログラム, 残りの 64 バイト

MBR の最後の 2 バイトは MBR を表す 0xAA55 が入っている.

### パーティションテーブルの構造 ###

* ブートフラグ: 1 byte,  パーティションがブート可能か 
   * 0x00: ブート不可
   * 0x80:  ブート可
* パーティションの開始位置: 3 bytes, CHSアドレスでのパーティション開始位置
* パーティションタイプ: 1 byte, OS・ファイルシステムのタイプ
* パーティションの終了位置: 3bytes, CHSアドレスでのパーティション終了位置
* パーティションの開始位置: 4bytes, LBAアドレスでのパーティション開始位置
* パーティションの総セクター数: 4bytes, LBAアドレスでのパーティション総セクター数

