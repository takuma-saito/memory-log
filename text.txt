テキスト操作でよく利用するコマンド
============================

ファイルのマッチング(zsh）
----------------------------

* ファイルのみ: `ls -1 **/*(.)`
* ディレクトリのみ: `ls -D **/*(/)`

cut コマンド
----------------------------
列を区切るコマンド
**-d でセパレーター, -f でフィールドを指定する**

例) /etc/passwd からユーザー名のみを抜き出したい時

    $ cat /etc/passwd | cut -d":" -f1

イディオム
----------

### 重要 ###

* ループ構文: `while read line; do echo $line; done`
* 配列: `arr=(a b c d); echo $arr[1] $arr[2,4], $#arr` 配列は 1 から始まることに注意する！
* 集約: `sort -n | uniq -c` で集約が行える
* timestamp を見やすく: 

    $ echo 1104505200 awk '{print strftime("%c",$1)}'
    Sat Jan  1 00:00:00 JST 2005
    
    $ date --date "@1104505200"Sat Jan 1 00:00:00 2005

* perl で正規表現, ログ集計: `cat $file | perl -lne 'if (/^.*?$/) {print "$1 $2 $3"}'`
* zsh_history を見やすく: `perl -MPOSIX -lne 'if (/^:(.*?):(.*?);(.*?)$/) {print strftime("%Y/%m/%d %H:%M:%S", localtime($1)), "$2 $3"}'`
* 行頭に挿入: `sed -i -e '1i hogehoge'`
* 行数を表示: `nl files.txt`
* 指定した行のみ表示: `sed -n '53,54p'`
* マッチしたファイル名の表示: `grep -l`
* ファイルのみマッチ: `ls *(.)`
* wget の結果を標準出力: `wget -q -O - ipcheck.ieserver.net`
* .txt と .text 以外を表示: `ls ^*.(txt|text)`
* 5 ~ 10 行目を削除: `sed -e '5,10d' text.txt`
* 拡張子削除: `${name%.*}` or `$name:r`
* 拡張子だけ表示: `$name:e`
* ファイル名だけ表示: `$name:r`
* ディレクトリだけ残す: `$name:h`
* ディレクトリ部分を削除: `$name:t`

### 重要でない ###
* 先頭のスペース削除: `sed -E 's;^[ ]+;;g'`
* 改行コード付き cat: `cat -e`
* 簡易 Web サーバー: `% while true; do echo -e 'HTTP/1.1 200 OK\r\n'; | nc -vvv -l -p 8080; done`
* PDF 結合: `pdftk 1.pdf 2.pdf 3.pdf cat output 123.pdf`

### よく使うファイル修飾子 ###
* `(^)`: 通常ファイル
* `(/)`: ディレクトリ
* `(@)`: シンボリックリンク
* `(*)`: 実行ファイル
* `(D)`: ドットで始まるファイルも含める
* `(^)`: 後ろの修飾子の意味を反転させる^D*@/.

grep コマンド
----------------------------
ファイル内を検索するコマンド
-e オプションを付けることで、様々な条件でグロッピングできる.

### or 条件 ###

-e で複数の条件をつなげると or 条件でマッチできる.

例）ユーザーアカウントが入っている address.txt の中からメールアドレスが 
ac.jp co.jp で終わっているレコードを抜き出す

    $ grep -e ac.jp -e co.jp address.txt

* 正規表現にマッチさせる: `grep -E`
* 行番号を表示する: `grep -n`
* 正規表現にマッチしたファイル名を表示: `grep -l`
* 正規表現にマッチした文字列のみ表示: `grep -o`
* 正規表現にマッチした行を削除する: `grep -v`
* 完全一致で検索する場合: `grep -w`
* 最短一致で検索する場合: perl を使いましょう
* Perl 互換性のある正規表現でマッチ: `grep -P`
    Perl 互換の正規表現を使うと*先読み, 戻り読みが行えるので非常に強力*
    左側に ~ が存在する: (?<=...)
    右側に ~ が存在する: (?=...)
    例)
    
        ファイルの中からリンク一覧を取得する
        $ cat index.html | grep -Po '(?<=href=")(.*)(?=")'

grep での正規表現で使える文字列

* 英数字: [[:alnum:]]
* 英語: [[:alpha]]
* IP アドレスを検索する: `grep -Po '[0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}\.[0-9]{1,4}'`

{} は開始位置と終了位置を共に入れなければならない。
`{4}` は正しい書式ではない。開始位置まで含めた `{1,4}` が正しい書式。

perl コマンド（ワンライーナー用）
----------------------------
perl で文字列の置換を行うには、以下のように行う.

    $ perl -pe "s;被置換文字列(正規表現);置換文字列;g" file

* 最短一致を使いたい場合は .*? を使う
* 後方参照は () で括り $1, $2, ... でアクセスできる

xargs コマンド
----------------------------

引数が長すぎる場合にパイプライン処理をして少しずつ読み込んでもらえる.
"arguments list too long" などエラーを吐かれた時に有効.

-i で挿入文字列を指定する.（デフォルトは {}）

例）カレントディレクトリ以下の全ての jpg ファイルを ~/hoge まで移動させる.

    $ cp **/*.jpg | xargs -i% cp % ~/hoge/
    $ cp **/*.jpg | xargs -i cp {} ~/hoge/

いきなり実行するのが不安な場合は echo を使って dry run を行う

    $ cp **/*.jpg | xargs -i echo cp {} ~/hoge/

uniq コマンド
----------------------------

重複した文字列に対する操作が行える

* 重複した文字列をカウントする: `uniq -c`
* 重複した文字列を削除する: `uniq -u`
* 重複した文字列のみ表示: `uniq -d`

sed コマンド
----------------------------
ファイルの一部を置換する時に利用する.

*また、sed コマンドを利用する場合は文字列のエスケープに注意する.*
'!' -> '\!'
'/' -> '\/'
'\' -> '\\\'

* コマンドを実行: `sed -e`
* *上書き*: `sed -i`
* 置換した行のみ表示: `sed -n -E 's;a(.*)h;\1;p'` p と -n が必要
* 拡張正規表現を使う: `sed -r`, 拡張表現で使える表現は ?, +，()，{}, の4つ 
  *特殊文字はエスケープすること: \{5,6\}, \(hoge\), \\[, \\], +,* **基本的には拡張表現として -E の方を使う**
* 拡張表現を使う: `sed -E`, 特殊文字のエスケープは必要なし, {}, (), ?, * など
* 特定行を削除: `sed -e "5,10d" file` 5 ~ 10行目までを削除

置換を行う場合 s の次の文字がデリミタとして使用される.
デリミタとしては, *'/' は使わないこと*. ⇐ これ重要
なぜならば URL の区切やファイルのパス名などマッチさせる文字列として '/' の特殊文字は多用されるため
いちいち全てエスケープしなければならないから.
検索する場合はシェルのエスケープを避けるため、2重カッコ "" ではなく 1重カッコ '' を使うこと.
**また、sed で改行は \n でマッチしないので注意すること.**
改行にマッチさせたい時は行の終わりの記号 $ を使うこと

例）デリミタを ';' とする場合.
/bin/bash から /usr/bin/bash に変換する.

    $ sed -e 's;#!/bin/bash;#!/usr/bin/bash;' file.sh

利用出来るオプションなど

* 英数字 [a-z A-Z 0-9] -> [:alpha:]
* 英字 [a-z A-Z] -> [:alnum:]
* 数字 [0-9] -> [:digit:]

変数を置換する場合は, sed を使わずに置換が行える
Var を shell の変数とすると,

* 最初の一回だけ置換: ${Var/置換前文字列/置換後文字列}
* すべて置換する場合: ${Var//置換前文字列/置換後文字列}

sort コマンド
----------------------------
数値をソートする.
特に2桁以上の文字列を数値としてソートしたい場合は `-n` オプションを使用すること.
また、環境によって結果が異なるのを避けるため, sort を行う時は LC_ALL=C を設定しておく.

-n オプションを使用しない場合:

    18
    1
    53
    ...

-n オプションを使用した場合

    1
    18
    53
    ...

* ソートしたファイルを上書き: `sort file.txt -uo file.txt`
   
* 降順でソート: `sort -r`

* 浮動小数点をソート: `sort -g`
   浮動小数点も含めたソートは相当遅くなり、エラー処理も出来ないようなので最終手段として使う.

* ソートしたいフィールドを指定する: `sort -k FFirst,FLast`
   行を区切りたい場合は -t オプションを付与する
   例) 
   1. 1,2番目のフィールドを降順でソート: `sort -k 1,2 -r`
   2. 2番目のフィールドをタブ区切でソート: `sort -t $'\t' -k 2,2`
   2. 2番目のフィールドのみを数値としてソート: `sort -k 2,2 -k 2n`
   3. 1番目のフィールドをソートし, さらに2番目の文字列としてソート: `sort -k 1,1 -k 2n`

* ランダムに並び替え: `sort -R`
   shuf コマンドでも並び替えることができる

* 重複を削除してソート: `sort -u`, これは `uniq | sort` に相当する。

awk コマンド
----------------------------
値の集約などを行いたい場合は awk の連想配列を使う.

-F オプションでデリミタを指定できる.（cut -d オプションと同じ）

例）/etc/passwd を":" 区切で解析する場合

    $ awk -F':' '{print $1}' /etc/passwd

* 浮動小数点の丸め込み: `int(variables)`
* 余りを求める: a の b で割った余り `a % b`
* `NF`: 現レコードのフィールド数
* `NR`: 現レコード番号

便利な関数

* gensub(置換する条件, 置換後の文字列, 置換方法 [, 対象文字列])
  例）
  
    $ gawk '
    > BEGIN {
    >      a = "abc def"
    >      b = gensub(/(.+) (.+)/, "\\2 \\1", "g", a)
    >      print b
    > }'
    -| def abc

* for 文
  
    for (key in table) {
       print key, table[key]
    }

* テキストのマッチング

    # html にマッチする場合
    /html/ {print "match"}
    
    # html にマッチしない場合
    !/html/ {print "nonmatch"}

* 特定の長さのみマッチさせる: `gawk 'length($2) == 2'`

join コマンド
----------------------------
2つのファイルを共通の key で結合する
joinコマンドを利用する場合は2つのファイルがそれぞれ結合するフィールドでsortしておく.
sortしないで実行すると期待通りの結果が得られない.

* `-1`: key として 1つ目のフィールドを指定する
* `-2`: key として 2つ目のフィールドを指定する
* `-v [n]`: [n] 番目の key がペアにならなかった行のみ出力
* `-u`: sort | uniq しないで済む（ソート状態になってなくても OK）

シェル（shell） の機能
----------------------------

path 変数にパスが設定されているとする

* ファイル名: `${path##*/}`
* 拡張子なしのファイル名: `${string_filename%.*}`
* パス名: `${path%/*}`
* 拡張子: `${path##*.}`

* 先頭から最短一致した部分を取り除く: `${変数%%パターン}`
* 先頭から最長一致した部分を取り除く: `${変数%パターン}`
* 末尾から最短一致した部分を取り除く: `${変数##パターン}`
* 末尾から最長一致した部分を取り除く: `${変数#パターン}`

xargs, parallel コマンド
----------------------------
parallel を使うと並列処理が行える.

典型的な使い方の例）
-j +0 オプションで CPU のコア数まで可能な限りのジョブを実行する

    # テキストファイルの全ての行数を数える
    $ ls **/*.txt | parallel -j +0 cat {} | wc -l


シェルを鍛える問題集
----------------------------
自分が使用している access.log を解析する.

1) 拡張子ごとのアクセス数

gif 28.66
png 21.18
css 13.01
...

2) 日付ごとのアクセス数

2012-Nov-26 3041
2012-Jun-27 3000
2012-Jun-26 2597
...

3) 時間帯ごとの統計

00 676
01 1159
02 1198
03 811
04 410
05 212
...

4) 各ステータスごとの統計

301 3
302 3
403 5
500 7
206 389
404 813
200 3818
304 11837

5) 404 ステータスを返却している URL 

/ 10
/index.php 8
...

6) IP アドレスごとのアクセス数上位20

aaa.aaa.aaa.aaa     161891
bbb.bbb.bbb.bbb     126389
ccc.ccc.ccc.ccc     64351
...

7) 6)で求めたIPアドレスの逆引きできるホスト名一覧を追加せよ

aaa.aaa.aaa.aaa     x.a.ne.jp
bbb.bbb.bbb.bbb     y.b.ne.jp
ccc.ccc.ccc.ccc     z.c.ne.jp
...

8) 6) と 7) の結果を結合し、アクセス数でソートした結果を表示せよ

161891   x.a.ne.jp    aaa.aaa.aaa.aaa
126389   y.b.ne.jp    bbb.bbb.bbb.bbb
64351    z.c.ne.jp    ccc.ccc.ccc.ccc
...

9) google bot の総アクセス数を求めよ. また、それは全体のアクセス数に対してどの程度の比率か？
googlebot のIPの数: 43
googlebot のアクセス数: 535
比率: 0.124%

10) メソッド別の統計一覧
PROPFIND           24
HEAD              143
POST              249
OPTIONS           668
GET            428343

11) URL 別のアクセス統計
（注 GETのパラメーターを削除しなければならない）

231077 /index.php
8197 /
4366 /welecome
....
                                                                                     

その他
----------------------------

* 連番を作成する:
  * zsh: `{1..100}`
  * その他: `seq 1 100`

* ランダムなデータ:
  * 1 ~ 100 以内のランダムなデータ: `echo $((RANDOM % 100 + 1))`
  RANDOM 変数の中に毎回異なるランダムな値が入っている
   
* ファイルを逆順で読み込む: 
  tac で出来る(tac は cat と逆の綴り)
   
* `arguments list too long` と出た時:
  zsh を使っている場合は zargs を使う
   
  使い方)
  zargs -- ファイルのグロッピング -- コマンド
   
    # 元のコマンド
    $ ls books/**/*
   
    # zargs 版
    $ zargs -- books/**/* -- ls

* ファイルと標準出力の両方へ出力する:
    tee コマンドを使う: `ls | tee file` または `ls > file | tee`

* 空白と改行の変換:
    tr コマンドを使う: `tr ' ' '\n'`

* 大文字から小文字の変換: `tr 'A-Z' 'a-z'`

* ファイルをサイズ順に出力:
    ls のオプション -S を使う, 例）`ls -alS | head`

* 行単位で結合したい場合: paste コマンド `paste file1 file2 ...`

* 文字列を反転させる: rev コマンド `echo hoge | rev`

* パス名からファイル名を取り出す: `basename filename`

* パス名からディレクトリ名のみ取り出す: `dirname filename`

* シングルクオートのエスケープ: *"\'" ではなく  "'\''"*

* 特定の文字を全て削除する場合: tr に -d フラグを付ける `tr -d '[hoge]'`
    "tr: Illegal byte sequence"とか怒られちゃう場合は、trの前にLC_CTYPE=C を付ける

* ハイフン "-" から始まるファイルを指定する場合 "--" を付けて指定しなければならない（オプションとみなされる）:
    例） -pn から pn へディレクトリ名を変更する場合 `mv -- -pn pn`

* 空ファイルを作る: touch ではなくレダイレクトのみで作成できる `> file`

* シェル上で or 検索を行う場合: `ls **/*{jpg,.png}`, {} で中身を囲み, "," で区切る *正規表現の or 条件 "|" とは異なるので注意すること*

* ls で連番順にソート: `ls -v *`
  ls は通常アルファベット順にソートされてしまう.
  -v オプションソートを連番順にしてくれる.
  例) 連番の jpg ファイルを連番を整えたまま Mac のビュワーで閲覧: `open $(ls -1v *.jpg)`

* ファイルの最初に文字を追加する: sed の挿入モードを使う
   例）行頭に #!/bin/sh を挿入する場合 `sed -i '1s;^;#!/bin/sh;'`

* 空行を削除する: `sed -re "/^$/d"`

* ファイルを一括で変更: 
   
   基本的な使い方
      
     $ zmv '(*).txt' 'file-$1.txt'
   
   実行する祭は -n で dry run を行なってから変更を行う
   
     $ zmv -n '(*).txt' 'file-$1.txt'
   
   2つ目の引数ではシェル変数展開機能も使える.
   例えば、3340_$i という連番を $i に一括変更する場合
   
     # dry run で確認
     $ zmv -n '(*).jpg' '${1/3340_/}.jpg'

     # 実際に実行
     $ zmv '(*).jpg' '${1/3340_/}.jpg'
   
   さらに便利にするため zsh のエイリアスを設定しておく.
   -W を指定することで, 1番目の引数にカッコを指定しなくて済む.
   
     autoload -Uz zmv
     alias zmv='noglob zmv -W'
     
   .txt を .c に一括変更する
   
     $ zmv *.txt *.c

* 変数をファイル中のものとみなす: `<(code)`
   この構文を使用すると, 一時ファイルを作らずに済む 

     $ echo <(echo {1..5} | sed 's; ;\n;g')
     /dev/fd/11

     $ cat <(echo {1..5} | sed 's; ;\n;g')
     1
     2
     3
     4
     5

* 標準出力とエラーを両方リダイレクトする場合: >& を使う

* 文字のエンコードを変換: `iconv -c -f UTF-8 -t ISO-8859-1 in.txt > out.txt`
   * `-t`: to
   * `-f`: from
   * `-c`: 変換できない文字をスキップする

* bash, zsh でシングルクオートのエスケープ: `echo \'''`

* マルチバイトの文字数を数える: `wc -m`

* 改行削除: `tr -d '\n'`
