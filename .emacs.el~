



;; auto-install
;; (require 'auto-install)
;; (setq auto-install-directory "~/.emacs.d/elisp/") ;Emacs Lispをインストールするディレクトリの指定
;; (auto-install-update-emacswiki-package-name t)
;; (auto-install-compatibility-setup) ;install-elisp.elとコマンド名を同期

(require 'anything)
;; (global-set-key (kbd "C-x b") 'anything)

;; auto-complete
(require 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
(setq ac-auto-start t)

;; js2 - mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.pac$" . js2-mode))

(setq mac-allow-anti-aliasing nil)  ; mac 固有の設定
(setq mac-option-modifier 'meta) ; mac 用の command キーバインド
;; (mac-key-mode 1) ; MacKeyModeを使う

(show-paren-mode t) ; 対応する括弧を光らせる。
(transient-mark-mode t) ; 選択部分のハイライト

(setq require-final-newline t)          ; always terminate last line in file
(setq default-major-mode 'text-mode)    ; default mode is text mode

;;
(setq completion-ignore-case t) ; file名の補完で大文字小文字を区別しない
(setq partial-completion-mode 1) ; 補完機能を使う

(set-frame-parameter nil 'alpha 85)
;;(set-frame-parameter nil 'fullscreen 'fullboth) ;;フルスクリーン

;; スタートアップメッセージを非表示
(setq inhibit-startup-message t)
(if window-system (progn
; ツールバーの非表示
(tool-bar-mode nil)))

;;(if (eq window-system 'mac) (require 'carbon-font))
;;(fixed-width-set-fontset "osaka" 10)

(if window-system (progn
(setq initial-frame-alist '((width . 190) (height . 55)
(top . 0) (left . 30)))
(set-cursor-color "Gray")
))
(setq backup-inhibited t)

(setq make-backup-files nil)
;;~を作らない↑#を作らない↓
(setq auto-save-default nil)

;; ruby-mode
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
(setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))
(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
          '(lambda () (inf-ruby-keys)))

;; ruby-electric
(require 'ruby-electric)
(add-hook 'ruby-mode-hook '(lambda () (ruby-electric-mode t)))
;; rubydb
(autoload 'rubydb "rubydb3x"
  "run rubydb on program file in buffer *gud-file*.
the directory containing file becomes the initial working directory
and source-file directory for your debugger." t)

;; coffee script
(require 'coffee-mode)
(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))

;; rail
(defun try-complete-abbrev (old)
  (if (expand-abbrev) t nil))
(setq hippie-expand-try-functions-list
      '(try-complete-abbrev
        try-complete-file-name
        try-expand-dabbrev))
(setq rails-use-mongrel t)
(require 'cl)

;; railsの調子がよくない（日本語がおかしくなる）
;; (require 'rails)

;; action script mode

(autoload 'actionscript-mode "actionscript-mode" "actionscript" t)
(setq auto-mode-alist
      (append '(("\\.as$" . actionscript-mode))
              auto-mode-alist))

;; ruby-block
(require 'ruby-block)
(ruby-block-mode t)
;; ミニバッファに表示し, かつ, オーバレイする.
(setq ruby-block-highlight-toggle t)


;; Fortranモードの設定(固定形式)
(setq fortran-mode-hook
      '(lambda () (setq
                   fortran-do-indent 2
                   fortran-if-indent 2
                   fortran-program-indent 2
                   fortran-continuation-indent 2
                   )
         ;;(turn-on-font-lock)
         ))
;; Fortranモードの設定(自由形式)
(setq f90-mode-hook
      '(lambda () (setq
                   f90-do-indent 2
                   f90-if-indent 2
                   f90-program-indent 2
                   f90-continuation-indent 2
                   )
         ;;(turn-on-font-lock)
         ))

(add-hook 'f90-mode-hook
          '(lambda ()
             (define-key f90-mode-map "\C-m" 'newline-and-indent)))

;; C++ style
(add-hook 'c++-mode-hook
          '(lambda()
             (c-set-style "stroustrup")
             (setq indent-tabs-mode nil)     ; インデントは空白文字で行う（TABコードを空白に変換）
             (c-set-offset 'innamespace 0)   ; namespace {}の中はインデントしない
             (c-set-offset 'arglist-close 0) ; 関数の引数リストの閉じ括弧はインデントしない
             ))

;; tex の設定
;;(require 'tex-site)
;;(setq TeX-default-mode 'japanese-latex-mode)
;;(setq japanese-TeX-command-default "pTeX")
;;(setq japanese-LaTeX-command-default "pLaTeX")
;;(setq japanese-LaTeX-default-style "jsarticle")
;;(setq-default TeX-master nil)
;;(setq TeX-parse-self t)
;;(add-to-list 'TeX-output-view-style
;;'("^dvi$" "." "dvipdfmx %dS %d && open %s.pdf"))

;; erlangの設定
;; (setq load-path (cons  "/opt/local/lib/erlang/lib/tools-2.6.6.2/emacs"
;;       load-path))
;;       (setq erlang-root-dir "/opt/local")
;;       (setq exec-path (cons "/opt/local/bin" exec-path))
(require 'erlang-start)

;; face-listの設定
;; (require 'face-list)

;; C-c c で compile コマンドを呼び出す
(define-key mode-specific-map "c" 'compile)

;; 色の設定
;; (set-face-foreground 'Preprocessor "red")
;; (set-face-foreground 'Builtin "red")
;; (set-face-foreground 'Function\ Name "red")
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(gud-gdb-command-name "gdb --annotate=1")
 '(large-file-warning-threshold nil)
 '(safe-local-variable-values (quote ((encoding . UTF-8)))))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(comint-highlight-prompt ((t (:foreground "green"))))
 '(font-lock-builtin-face ((((class color) (min-colors 8)) (:foreground "red" :weight bold))))
 '(font-lock-function-name-face ((((class color) (min-colors 8)) (:foreground "green" :weight bold))))
 '(font-lock-preprocessor-face ((t (:foreground "cyan")))))

;; 行番号の表示
; Add my private library path
(setq load-path
          (append
               (list
                    (expand-file-name "~/elisp/")
                        )
                   load-path))
;
; Show line number
;
(require 'wb-line-number)
(setq truncate-partial-width-windows nil)
;(set-scroll-bar-mode nil)
(setq wb-line-number-scroll-bar t)
(wb-line-number-toggle)

;; install elispの設定
(require 'install-elisp)
(setq install-elisp-repository-directory "~/.emacs.d/")

;;graphviz mode
(load "graphviz-dot-mode.el")
(add-hook 'graphviz-dot-mode-hook (lambda () (local-set-key [f5] "\C-x\C-s\C-cc\C-m\C-cp")))

;;; js2-mode
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

; fixing indentation
; refer to http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
(autoload 'espresso-mode "espresso")

(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (espresso--proper-indentation parse-status))
           node)

      (save-excursion

        ;; I like to indent case and labels to half of the tab width
        (back-to-indentation)
        (if (looking-at "case\\s-")
            (setq indentation (+ indentation (/ espresso-indent-level 2))))

        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = "bar",
        ;;     bar = "foo";
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation (+ 4 indentation))))

      (indent-line-to indentation)
      (when (> offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (< (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the "buffer
          ;; modified" property for nothing
          (beginning-of-line)
          (unless (looking-at "\\s-*$")
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'espresso)
  (setq espresso-indent-level 4
        indent-tabs-mode nil
        c-basic-offset 4)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  ; (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map "\C-\M-\\"
    '(lambda()
       (interactive)
       (insert "/* -----[ ")
       (save-excursion
         (insert " ]----- */"))
       ))
  (define-key js2-mode-map "\C-m" 'newline-and-indent)
  ; (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  ; (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map "\C-\M-q" 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
      (js2-highlight-vars-mode))
  (message "My JS2 hook"))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GNU GLOBAL(gtags)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'gtags)
(autoload 'gtags-mode "gtags" "" t)
(global-set-key "\M-t" 'gtags-find-tag)
(global-set-key "\M-r" 'gtags-find-rtag)
(global-set-key "\M-s" 'gtags-find-symbol)
(global-set-key "\C-p" 'gtags-pop-stack)

;; conf-modeをロード
(require 'conf-mode)

;; コード補完
;; ロード
(require 'auto-complete-config)
(require 'ac-company)

;; 対象の全てで補完を有効にする
(global-auto-complete-mode t)

;; ac-company で company-xcode を有効にする
(ac-company-define-source ac-source-company-xcode company-xcode)

;; ac-company で company-gtags を有効にする
(ac-company-define-source ac-source-company-gtags company-gtags)

;; objc-mode, c-mode c++-mode で補完候補を設定
(setq ac-modes (append ac-modes '(objc-mode)))
(setq ac-modes (append ac-modes '(c-mode)))
(setq ac-modes (append ac-modes '(c++-mode)))

;; hook
(add-hook 'objc-mode-hook
         (lambda ()
           (define-key objc-mode-map (kbd "\t") 'ac-complete)
           ;; XCode を利用した補完を有効にする
           (push 'ac-source-company-xcode ac-sources)
           ;; C++ のキーワード補完をする Objective-C++ を利用する人だけ設定してください
           (push 'ac-source-c++-keywords ac-sources)
         ))
;; 補完ウィンドウ内でのキー定義
(define-key ac-completing-map (kbd "C-n") 'ac-next)
(define-key ac-completing-map (kbd "C-p") 'ac-previous)
(define-key ac-completing-map (kbd "M-/") 'ac-stop)
;; 補完が自動で起動するのを停止
(setq ac-auto-start nil)
;; 起動キーの設定
(ac-set-trigger-key "TAB")
;; 候補の最大件数 デフォルトは 10件
(setq ac-candidate-max 20)

;; フォルダを表示
(require 'nav)

;;;; File-Info - ファイル情報
;;;====================================
;;; 2007年12月29日(土曜日) 21:07:43 JST
;;; カレントバッファのファイル情報を表示する。
(defun file-info () "
カレントバッファのファイル情報を表示する。"
  (interactive)
  (if (buffer-file-name (current-buffer))
      (progn
        (let* ((file-name (buffer-file-name (current-buffer)))
               (f-attr (file-attributes file-name))
               (a-time (nth 4 f-attr))  ; 最終アクセス時刻
               (m-time (nth 5 f-attr))  ; 最終修正時刻
               (f-size (nth 7 f-attr))  ; ファイルサイズ
               (f-mode (nth 8 f-attr))  ; ファイル属性
               (mes1 (format "ファイルパス:   %s\n" file-name))
               (mes2 (format "最終参照時刻:   %s\n"
                              (format-time-string
                               "%Y-%m-%d %H:%M:%S" a-time)))
               (mes5 (format "ファイル属性:   %s" f-mode))
               (mess (concat mes1 mes2 mes5)))
          (message "%s" mess)))
    nil))

;; commentの設定
(setq comment-style 'extra-line)
(global-set-key "\C-c\C-i" 'file-info)
(require 'doxymacs)

;; cssの設定
(autoload 'css-mode "css-mode")
(setq auto-mode-alist
     (cons '("\\.css\\'" . css-mode) auto-mode-alist))
(setq cssm-indent-function #'cssm-c-style-indenter)

;; R言語の設定
(setq load-path (cons (expand-file-name "~/.emacs.d/ess") load-path))
(require 'ess)
(setq auto-mode-alist
     (cons (cons "\\.r$" 'R-mode) auto-mode-alist))
(autoload 'R-mode "ess-site" "Emacs Speaks Statistics mode" t)
(setq-default inferior-R-program-name "/Library/Frameworks/R.framework/Resources/bin/R")

;; Common Lispの設定
(setq load-path (cons (expand-file-name "~/.emacs.d/slime") load-path))
(setq inferior-lisp-program "/opt/local/bin/clisp")    ; clisp用
;; (setq inferior-lisp-program "/opt/local/bin/sbcl")     ; sbcl用
(require 'slime)
(slime-setup)

;日本語利用
(setq slime-net-coding-system 'utf-8-unix)

; 対応する括弧を光らせる
(show-paren-mode)

; リージョンに色を付ける
(setq transient-mark-mode t)

;; scala モード
(require 'scala-mode-auto)
(require 'scala-mode-feature-electric)
(add-hook 'scala-mode-hook
          (lambda ()
            (scala-electric-mode)))
(setq scala-interpreter "/opt/local/bin/scala")


;; csv モード
(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
(autoload 'csv-mode "csv-mode"
  "Major mode for editing comma-separated value files." t)

;; Zen Coding mode
(require 'zencoding-mode)
(add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes
(define-key zencoding-mode-keymap "\C-z" 'zencoding-expand-line)

;; 各コマンドエイリアス
(global-set-key "\C-m" 'newline-and-indent) ; リターンで改行とインデント
(global-set-key "\C-j" 'newline)  ; 改行
(global-set-key "\C-u" 'undo) ; undo

;; 画像の表示
(auto-image-file-mode)

;; scheme
(setq scheme-program-name "gosh -I. -i")
(autoload 'scheme-mode "cmuscheme" "Major mode for Scheme" t)
(autoload 'run-sheme "cmuscheme" "Run an inferior Scheme process" t)
(defun scheme-other-window ()
  "Run scheme on Other Window"
  (interactive)
  (switch-to-buffer-other-window
   (get-buffer-create "*scheme*"))
  (run-scheme scheme-program-name))

(define-key global-map
  "\C-cs" 'scheme-other-window)

;; 対応するカッコを光らせる
(show-paren-mode)

;; pyhoneの設定
(add-hook 'python-mode-hook
          '(lambda ()
             (setq indent-tabs-mode nil)
             (setq py-indent-offset 4)))

;; objective C の設定
(add-to-list 'auto-mode-alist '("\\.mm?$" . objc-mode))
(add-to-list 'auto-mode-alist '("\\.h$" . objc-mode))

;; zsh 上のshellスクリプトの編集モード設定
(add-to-list 'auto-mode-alist '("zshec" . shell-script-mode))

(require 'vcl-mode)

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

(autoload 'apache-mode "apache-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.htaccess\\'"   . apache-mode))
(add-to-list 'auto-mode-alist '("httpd\\.conf\\'"  . apache-mode))

;; メール設定

;; (autoload 'mew "mew" nil t)
;; (autoload 'mew-send "mew" nil t)
;; (setq mew-name "takuma.saitou1")
;; (setq mew-user "takuma.saitou1")
;; (setq mew-mail-domain "gmail.com")
;; (setq mew-smtp-server "smtp.gmail.com")
;; (setq mew-mailbox-type 'mbox)
;; (setq mew-mbox-command "incm")
;; (setq mew-mbox-command-arg "-u -d /Users/saitoutakuma/Maildir")


;; php の設定
(require 'php-mode)
(setq auto-mode-alist
      (cons '("\\.php\\'" . php-mode) auto-mode-alist))

(setq php-mode-force-pear t) ;PEAR規約のインデント設定にする
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode)) ;*.phpのファイルのときにphp-modeを自動起動する

;; css の設定
(autoload 'css-mode "css-mode")
(setq auto-mode-alist
      (cons '("\\.css\\'" . css-mode) auto-mode-alist))
(setq cssm-indent-function #'cssm-c-style-indenter)

;; mmm の設定
;;;; mmm-mode
;; ;;; mmm-mode
;; (require 'mmm-mode)
;; ;(require 'mmm-auto)
;; (setq mmm-submode-decoration-level 2)
;; (invert-face 'mmm-default-submode-face t)
;; (setq mmm-font-lock-available-p t)
;; (setq mmm-global-mode 'maybe)
;; ; (set-face-bold-p 'mmm-default-submode-face t)
;; ;(set-face-background 'mmm-default-submode-face nil)
;; (mmm-add-mode-ext-class nil "\\.php?\\'" 'html-php)
;; (mmm-add-classes
;;  '((html-php
;;     :submode php-mode
;;     :front "<\\?\\(php\\)?"
;;     :back "\\?>")))
;; (add-to-list 'auto-mode-alist '("\\.php?\\'" . html-mode))
;; ;; タブの改善
;; (defun save-mmm-c-locals ()
;;   (with-temp-buffer
;;     (php-mode)
;;     (dolist (v (buffer-local-variables))
;;       (when (string-match "\\`c-" (symbol-name (car v)))
;;         (add-to-list 'mmm-save-local-variables `(,(car v) nil, mmm-c-derived-modes))))))
;; (save-mmm-c-locals)

;; (require 'mmm-mode)
;; (setq mmm-global-mode 'maybe)
;; (set-face-background 'mmm-default-submode-face nil)
;; ;; for php-mode in html-helper-mode
;; (mmm-add-mode-ext-class nil "\\.php?\\'" 'html-php)
;; (mmm-add-classes
;;  '((html-php
;;     :submode php-mode
;;     :front "<\\?\\(php\\)?"
;;     :back "\\?>")))
;; (add-to-list 'auto-mode-alist '("\\.php?\\'" . html-helper-mode))


;; (require 'haskell-mode)
(load "haskell-site-file")
(add-hook 'haskell-mode-hook 'font-lock-mode)
(add-hook 'haskell-mode-hook 'imenu-add-menubar-index)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
(add-hook 'haskell-mode-hook 'font-lock-mode)
(add-hook 'haskell-mode-hook 'imenu-add-menubar-index)
;; (add-hook 'haskell-mode-hook (lambda () (local-set-key [f5] "\C-c\C-l\C-x\omain\C-m\C-xo")))
;; (autoload 'ghc-init "ghc" nil t)
;; (add-hook 'haskell-mode-hook (lambda () (ghc-init)))
;; (add-hook 'haskell-mode-hook (lambda () (local-set-key "\C-i" 'ghc-complete)))
;; (add-hook 'haskell-mode-hook (lambda () (local-set-key [backtab] 'haskell-indent-cycle)))


